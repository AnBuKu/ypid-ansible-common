#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2017 Robin Schneider <ypid@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
Update `galaxy_info.min_ansible_version` in `meta/main.yml` of Ansible roles.
The default is to set min_ansible_version to the oldest, still supported
Ansible release with all security updates, thus, it will also set the patch level as needed.
Refer to: https://www.ansible.com/security

Note that Ansible as of 2.2 does not even give a hint if a role is run with an unsupported Ansible version.
Tracked upstream: https://github.com/ansible/ansible/issues/18375
"""

__license__ = 'AGPL-3.0'
__author__ = 'Robin Schneider <ypid@riseup.net>'
__version__ = '0.5.0'

from distutils.version import StrictVersion
import logging
import argparse
import fileinput

import yaml

LOG = logging.getLogger(__name__)
ANSIBLE_MIN_TRUSTWORTHY_VERSION = '2.1.4'


def update_meta_main_file(meta_main_file, set_version_explicit, set_version=ANSIBLE_MIN_TRUSTWORTHY_VERSION):
    """Update version in given `meta/main.yml` file.
    Return previous version if update was necessary and None otherwise.
    """
    with open(meta_main_file, 'r') as meta_main_fh:
        data = yaml.safe_load(meta_main_fh)

        prev_version = data['galaxy_info']['min_ansible_version']
        if StrictVersion(prev_version) == StrictVersion(set_version):
            return None

        if not set_version_explicit and StrictVersion(set_version) < StrictVersion(prev_version):
            LOG.info("Donâ€™t downgrade min version when not explicitly set by the user.")
            return None

    with fileinput.FileInput(meta_main_file, inplace=True) as file_fh:
        for line in file_fh:
            print(line.replace(prev_version, set_version).rstrip())

    return prev_version


def update_text_file(text_file, prev_version, set_version=ANSIBLE_MIN_TRUSTWORTHY_VERSION):
    with fileinput.FileInput(text_file, inplace=True) as file_fh:
        for line in file_fh:
            print(line.replace(prev_version, set_version).rstrip())


def get_args_parser():
    args_parser = argparse.ArgumentParser(
        description=__doc__,
        #  epilog=__doc__,
    )
    args_parser.add_argument(
        '-V', '--version',
        action='version',
        version=__version__,
    )
    args_parser.add_argument(
        '-v', '--verbose',
        help="Write information and higher to STDOUT|STDERR.",
        action="store_const",
        dest="loglevel",
        const=logging.INFO,
    )
    args_parser.add_argument(
        'meta_main_file',
        help="File path to a `meta/main.yml`-like file be processed.",
    )
    args_parser.add_argument(
        '-u', '--update-text-file',
        help="When an min version update is done"
        " then search the given text file(s) for the old the version and update it to the new version.",
        nargs='+',
        default=[],
    )
    args_parser.add_argument(
        '-s', '--set-version',
        help="Set the given version."
        " Note that this script does not allow to set a lower version than"
        " {} (which is the current default)"
        " because previous versions have known vulnerabilities.".format(
            ANSIBLE_MIN_TRUSTWORTHY_VERSION,
        ),
    )

    return args_parser


def main():
    args_parser = get_args_parser()
    args = args_parser.parse_args()
    if args.loglevel is None:
        args.loglevel = logging.WARNING
    logging.basicConfig(
        format='%(levelname)s{}: %(message)s'.format(
            ' (%(filename)s:%(lineno)s)' if args.loglevel <= logging.DEBUG else '',
        ),
        level=args.loglevel,
    )

    set_version_explicit = True
    if args.set_version is None:
        args.set_version = ANSIBLE_MIN_TRUSTWORTHY_VERSION
        set_version_explicit = False

    if len(args.set_version.split('.')) != 3:
        args_parser.error("A version number following semantic versioning is expected.")

    if StrictVersion(args.set_version) < StrictVersion(ANSIBLE_MIN_TRUSTWORTHY_VERSION):
        raise SystemExit(
            "Given version to set ({}) is less than Ansible min trustworthy version ({})."
            " Refusing to set a untrustworthy version as min version. Existing.".format(
                args.set_version,
                ANSIBLE_MIN_TRUSTWORTHY_VERSION,
            )
        )

    prev_version = update_meta_main_file(args.meta_main_file, set_version_explicit, set_version=args.set_version)
    if prev_version is not None:
        for text_file in args.update_text_file:
            update_text_file(text_file, prev_version, set_version=args.set_version)

if __name__ == '__main__':
    main()
